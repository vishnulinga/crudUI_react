{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","insert","a","state","fname","lname","email","alert","fetch","method","body","JSON","stringify","headers","res","json","result","console","log","message","update","delete","display","setState","resarray","change","bind","event","this","target","name","value","style","marginLeft","marginRight","textAlign","type","width","height","marginTop","marginBottom","placeholder","onChange","onClick","color","map","ele","key","_id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.eae992a6.chunk.js","sourcesContent":["import React, {Component} from 'react';\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            fname: \"\",\n            lname: \"\",\n            email: \"\",\n            resarray: []\n        }\n\n        this.change = this.change.bind(this)\n    }\n    change(event) {\n        this.setState({[event.target.name]: event.target.value})\n    }\n    insert = async () => {\n        if (this.state.fname === \"\" || this.state.lname === \"\" || this.state.email === \"\") \n            alert(\"Please enter all details\")\n         else {\n            try {\n                var res = await fetch(\"https://react-crud-server.herokuapp.com/insert\", {\n                    method: \"POST\",\n                    body: JSON.stringify(\n                        {fname: this.state.fname, lname: this.state.lname, email: this.state.email}\n                    ),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                var result = await res.json()\n                console.log(result)\n                alert(result.message)\n            } catch (err) {\n                console.log(err)\n            }\n        }\n\n    }\n    // ..................................................\n    update = async () => {\n        if (this.state.fname === \"\" || this.state.lname === \"\" || this.state.email === \"\") \n            alert(\"Please enter all details\")\n         else {\n            try {\n                var res = await fetch(\"https://react-crud-server.herokuapp.com/update\", {\n                    method: \"POST\",\n                    body: JSON.stringify(\n                        {fname: this.state.fname, lname: this.state.lname, email: this.state.email}\n                    ),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                var result = await res.json()\n\n                alert(result.message)\n            } catch (err) {\n                console.log(err)\n            }\n        }\n\n    }\n    // .........................................\n    delete = async () => {\n        if (this.state.email === \"\") \n            alert(\"Please enter email\")\n         else {\n            try {\n                var res = await fetch(\"https://react-crud-server.herokuapp.com/delete\", {\n                    method: \"POST\",\n                    body: JSON.stringify(\n                        {email: this.state.email}\n                    ),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                })\n                var result = await res.json()\n                alert(result.message)\n            } catch (err) {\n                console.log(err)\n            }\n        }\n\n    }\n    // ................................................\n\n\n    display = async () => {\n\n        try {\n            var res = await fetch(\"https://react-crud-server.herokuapp.com/display\")\n            var result = await res.json()\n            this.setState({resarray: result})\n        } catch (err) {\n            console.log(err)\n        }\n\n    }\n\n\n    render() {\n        return (\n            <div style={\n                {\n                    marginLeft: \"auto\",\n                    marginRight: \"auto\",\n                    textAlign: \"center\"\n                }\n            }>\n                <h1>CRUD Operations Demo On User Data</h1>\n                <div><input type={\"text\"}\n                        style={\n                            {\n                                width: \"300px\",\n                                height: \"30px\",\n                                marginTop: \"5px\",\n                                marginBottom: \"5px\"\n                            }\n                        }\n                        name={\"fname\"}\n                        placeholder={\"First Name\"}\n                        onChange={\n                            this.change\n                        }/></div>\n                <div><input type={\"text\"}\n                        style={\n                            {\n                                width: \"300px\",\n                                height: \"30px\",\n                                marginTop: \"5px\",\n                                marginBottom: \"5px\"\n                            }\n                        }\n                        name={\"lname\"}\n                        placeholder={\"Last Name\"}\n                        onChange={\n                            this.change\n                        }/></div>\n                <div><input type={\"text\"}\n                        style={\n                            {\n                                width: \"300px\",\n                                height: \"30px\",\n                                marginTop: \"5px\",\n                                marginBottom: \"5px\"\n                            }\n                        }\n                        name={\"email\"}\n                        placeholder={\"Email\"}\n                        onChange={\n                            this.change\n                        }/></div>\n                <button onClick={\n                    this.insert\n                }>\n                    {\"Insert\"}</button>\n                <button onClick={\n                    this.update\n                }>\n                    {\"Update\"}</button>\n                <button onClick={\n                    this.delete\n                }>\n                    {\"Delete\"}</button>\n                <button onClick={\n                    this.display\n                }>\n                    {\"Display\"}</button>\n                <div style={\n                    {\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        textAlign: \"center\"\n                    }\n                }>\n                    <h3 style={\n                        {color: \"red\"}\n                    }>\n                        <ul>{\n                            this.state.resarray.map((ele) => (\n                                <li key={\n                                    ele._id\n                                }>FirstName::{\n                                    ele.fname\n                                }<br/>LastName::{\n                                    ele.lname\n                                }<br/>Email::{\n                                    ele._id\n                                }<br/></li>\n                            ))\n                        } </ul>\n                    </h3>\n                </div>\n            </div>\n\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}